#!/bin/bash

# .bashrc by Alexander Olzem

# shellcheck disable=SC1091 # Disable infos relating sourcing of external files
# shellcheck disable=SC1090
# shellcheck disable=SC2155 # Disable declare and assign separately

# Return if not interactive
[[ $- != *i* ]] && return

# Source bash-completion
[[ -f /usr/share/bash-completion/bash_completion ]] && \
  . /usr/share/bash-completion/bash_completion

__git_info() {
  # Check if current dir is a git repo
  local branch="$(git symbolic-ref --short HEAD 2>/dev/null)"
  if [[ -z "$branch" ]]; then
    return
  fi

  local gitinfo

  # Get state of local repo
  local gitstatus="$(git status 2>/dev/null)"
  case "$(echo "$gitstatus" | awk 'FNR==2{print $4}')" in
    behind) gitinfo='-' ;;
    ahead) gitinfo='+' ;;
    *) gitinfo='' ;;
  esac

  # Check for uncommited changes
  [[ "$(echo "$gitstatus" | grep "^Changes")" != "" ]] && \
    gitinfo="$gitinfo*"

  # Check for untracked files
  [[ "$(echo "$gitstatus" | grep "^Untracked")" != "" ]] && \
    gitinfo="$gitinfo?"

  # Display Branch indicating red when on master/main or else green
  case "$branch" in
    master|main)
      [[ -z "$gitinfo" ]] && gitinfo="$r$branch" || \
        gitinfo="$r$branch $gitinfo" ;;
    *)
      [[ -z "$gitinfo" ]] && gitinfo="$g$branch" || \
        gitinfo="$g$branch $gitinfo" ;;
  esac
  gitinfo="${b}($gitinfo${b})${x}"
  printf ' %s' "$gitinfo"
}

__kube_info() {
  local kubeinfo
  local kubeconfig="${KUBECONFIG:=$HOME/.kube/config}"
  if [[ ! -f $kubeconfig ]]; then
    return
  fi
  local ctx="$(awk '/^current-context:/ {print $2}' "$kubeconfig" 2>/dev/null)"
  [[ -n "$ctx" ]] && kubeinfo="${b}[${w}ctx:${ctx}${b}]${x}"

  printf ' %s' "$kubeinfo"
}

__ps1() {
  # colors
  local x='\[\033[0m\]'    # reset
  local r='\[\033[0;91m\]' # red
  local g='\[\033[0;92m\]' # green
  local b='\[\033[0;94m\]' # blue
  local w='\[\033[0;97m\]' # white

  last_exit_code="$?"
  # check if user is root
  local U
  if [[ "$(id -u)" -eq 0 ]]; then
    U='#'
    b=$r
  else
    U='$'
  fi
  U="${b}${U}"

  # check exit code
  local R
  if [[ $last_exit_code -eq 0 ]]; then
    R="${g}✔"
  else
    R="${r}✖"
  fi

  # Final arrangement for prompt
  PS1="${x}${b}╭ \u@\h ${w}\w$(__git_info)$(__kube_info)${x}\n${b}╰ ${R} ${U}${x} "
}

PROMPT_COMMAND="__ps1"

## Completion
# sudo
complete -cf sudo

# Kubernetes
[[ -n "$(command -v kubectl)" ]] && \
    . <(kubectl completion bash 2>/dev/null) && \
    complete -F __start_kubectl k
[[ -n "$(command -v helm)"     ]] && . <(helm completion bash 2>/dev/null)
[[ -n "$(command -v minikube)" ]] && . <(minikube completion bash 2>/dev/null)
[[ -n "$(command -v kind)"     ]] && . <(kind completion bash 2>/dev/null)
[[ -n "$(command -v zarf)"     ]] && . <(zarf completion bash 2>/dev/null)
[[ -n "$(command -v cilium)"   ]] && . <(cilium completion bash 2>/dev/null)
[[ -n "$(command -v porter)"   ]] && . <(porter completion bash 2>/dev/null)

_kube_contexts() {
  local cur;
  cur=${COMP_WORDS[COMP_CWORD]}
  if kubectl_out=$(kubectl config view -o template --template="{{ range .contexts  }}{{ .name }} {{ end }}"); then
    mapfile -t COMPREPLY < <(compgen -W "${kubectl_out[*]}" -- "$cur")
  fi
}

complete -F _kube_contexts kuc

# Terraform
complete -C /usr/bin/terraform terraform
complete -C /usr/bin/terraform tf

## Options
shopt -s checkwinsize
shopt -s expand_aliases # Aliases in scripts
shopt -s autocd         # '..' -> 'cd ..'
shopt -s histappend     # Enable history appending instead of overwriting.

# Pretty-print man(1) pages.
export LESS_TERMCAP_md=$(printf '\33[1;34m')    # start bold      (blue)
export LESS_TERMCAP_me=$(printf '\33[0m')       # end bold
export LESS_TERMCAP_so=$(printf '\33[1;30;43m') # start standout  (yellow)
export LESS_TERMCAP_se=$(printf '\33[0m')       # end standout
export LESS_TERMCAP_us=$(printf '\33[1;32m')    # start underline (green)
export LESS_TERMCAP_ue=$(printf '\33[0m')       # end underline
export LESS="-j.5 -R"                           # center search hits

# Set GPG_TTY for GPG
export GPG_TTY="$(tty)"

# LS_COLORS
export LS_COLORS="$LS_COLORS:di=00;94"

# enable some aliases
[[ -e "$HOME/.config/aliases" ]] && . "$HOME/.config/aliases"

# source other system specific autorun scripts
[[ -e "$HOME/.localrc" ]] && . "$HOME/.localrc"
[[ -e "$HOME/.local/localrc" ]] && . "$HOME/.local/localrc"

# enable thefuck
[[ -n "$(command -v thefuck)" ]] && eval "$(thefuck --alias fuck)"

# direnv hook
[[ -n "$(command -v direnv)" ]] && eval "$(direnv hook bash)"

# pfetch
if [[ -n "$(command -v pfetch)" ]] && [[ "$TERM_PROGRAM" != "vscode" ]] && [[ -z "$NVIM" ]]; then
  PF_INFO="ascii title os kernel uptime wm shell memory cache" pfetch
fi
